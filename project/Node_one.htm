<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Node_one.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Node_one.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue Jan 05 15:35:45 2021
<BR><P>
<H3>Maximum Stack Usage =         28 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; portInit
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[46]">CAN2_RX0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[47]">CAN2_RX1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[48]">CAN2_SCE_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[45]">CAN2_TX_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from main.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from main.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[41]">DMA2_Channel4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[42]">DMA2_Channel5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[43]">ETH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[44]">ETH_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[49]">OTG_FS_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4c]">Reset_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[39]">SPI3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from main.o(.text) referenced from startup_stm32f10x_cl.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[38]">TIM5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[3b]">UART5_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_cl.o(.text) referenced from startup_stm32f10x_cl.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_cl.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[51]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[84]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[85]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[52]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[56]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[87]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[88]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[89]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[90]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[91]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[92]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[93]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[96]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[98]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[99]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[5b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[9c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[9d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[50]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[53]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[55]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[57]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; portInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = main &rArr; portInit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_set_priority
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_enable_irq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_String
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; dma_disable_transfer_complete_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_disable_transfer_complete_interrupt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_disable_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>Clock_72</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; dma_disable_transfer_complete_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_disable_transfer_complete_interrupt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_disable_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_cl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6d]"></a>dma_channel_reset</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[a6]"></a>dma_enable_mem2mem_mode</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>dma_set_priority</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[74]"></a>dma_set_memory_size</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[73]"></a>dma_set_peripheral_size</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[72]"></a>dma_enable_memory_increment_mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[a7]"></a>dma_enable_peripheral_increment_mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>dma_enable_circular_mode</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>dma_set_read_from_peripheral</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
</UL>

<P><STRONG><a name="[71]"></a>dma_set_read_from_memory</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[a9]"></a>dma_enable_transfer_error_interrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>dma_disable_transfer_error_interrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>dma_enable_half_transfer_interrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>dma_disable_half_transfer_interrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>dma_enable_transfer_complete_interrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[64]"></a>dma_disable_transfer_complete_interrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_disable_transfer_complete_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>dma_enable_channel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[65]"></a>dma_disable_channel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_disable_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>dma_set_peripheral_address</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[6f]"></a>dma_set_memory_address</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[70]"></a>dma_set_number_of_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart3
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart3
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_read_usart1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_write_usart1
</UL>

<P><STRONG><a name="[66]"></a>Set_clock</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portInitAlt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portInit
</UL>

<P><STRONG><a name="[5e]"></a>portInit</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = portInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>portInitAlt</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_clock
</UL>

<P><STRONG><a name="[ad]"></a>portWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>pinSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>pinReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>portRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>pinRead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>nvic_enable_irq</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvic_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>nvic_disable_irq</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>nvic_get_pending_irq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>nvic_set_pending_irq</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>nvic_clear_pending_irq</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>nvic_get_active_irq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>nvic_get_irq_enabled</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>nvic_set_priority</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>nvic_generate_software_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>usartInit</STRONG> (Thumb, 498 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>sendChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_String
</UL>

<P><STRONG><a name="[69]"></a>GetChar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvString
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>

<P><STRONG><a name="[68]"></a>GetString</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>

<P><STRONG><a name="[6a]"></a>RecvString</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>

<P><STRONG><a name="[62]"></a>Send_String</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_String
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>dma_write_usart1</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_number_of_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_address
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_address
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_transfer_complete_interrupt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_read_from_memory
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_memory_increment_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_reset
</UL>

<P><STRONG><a name="[78]"></a>dma_read_usart1</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_number_of_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_address
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_address
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_transfer_complete_interrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_read_from_peripheral
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_memory_increment_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_reset
</UL>

<P><STRONG><a name="[7a]"></a>dma_write_usart2</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_number_of_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_address
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_address
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_transfer_complete_interrupt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_read_from_memory
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_memory_increment_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_reset
</UL>

<P><STRONG><a name="[7b]"></a>dma_read_usart2</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_number_of_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_address
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_address
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_transfer_complete_interrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_read_from_peripheral
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_memory_increment_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_reset
</UL>

<P><STRONG><a name="[7c]"></a>dma_write_usart3</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_number_of_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_address
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_address
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_transfer_complete_interrupt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_read_from_memory
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_memory_increment_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_reset
</UL>

<P><STRONG><a name="[7d]"></a>dma_read_usart3</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_number_of_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_address
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_address
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_transfer_complete_interrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_read_from_peripheral
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_memory_increment_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_reset
</UL>

<P><STRONG><a name="[7e]"></a>dma_write_usart4</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_number_of_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_address
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_address
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_transfer_complete_interrupt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_read_from_memory
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_memory_increment_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_reset
</UL>

<P><STRONG><a name="[7f]"></a>dma_read_usart4</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_number_of_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_address
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_address
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_channel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_transfer_complete_interrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_read_from_peripheral
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_enable_memory_increment_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_peripheral_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_memory_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_reset
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[b9]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[54]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[59]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
